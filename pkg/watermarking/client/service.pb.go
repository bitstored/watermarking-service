// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ToImageRequest
	ToImageResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ToImageRequest struct {
	Text []byte `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *ToImageRequest) Reset()                    { *m = ToImageRequest{} }
func (m *ToImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ToImageRequest) ProtoMessage()               {}
func (*ToImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ToImageRequest) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type ToImageResponse struct {
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	X     int32  `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y     int32  `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
}

func (m *ToImageResponse) Reset()                    { *m = ToImageResponse{} }
func (m *ToImageResponse) String() string            { return proto.CompactTextString(m) }
func (*ToImageResponse) ProtoMessage()               {}
func (*ToImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ToImageResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ToImageResponse) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ToImageResponse) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*ToImageRequest)(nil), "image_service.ToImageRequest")
	proto.RegisterType((*ToImageResponse)(nil), "image_service.ToImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transformation service

type TransformationClient interface {
	ToImage(ctx context.Context, in *ToImageRequest, opts ...grpc.CallOption) (*ToImageResponse, error)
}

type transformationClient struct {
	cc *grpc.ClientConn
}

func NewTransformationClient(cc *grpc.ClientConn) TransformationClient {
	return &transformationClient{cc}
}

func (c *transformationClient) ToImage(ctx context.Context, in *ToImageRequest, opts ...grpc.CallOption) (*ToImageResponse, error) {
	out := new(ToImageResponse)
	err := grpc.Invoke(ctx, "/image_service.Transformation/ToImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transformation service

type TransformationServer interface {
	ToImage(context.Context, *ToImageRequest) (*ToImageResponse, error)
}

func RegisterTransformationServer(s *grpc.Server, srv TransformationServer) {
	s.RegisterService(&_Transformation_serviceDesc, srv)
}

func _Transformation_ToImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformationServer).ToImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_service.Transformation/ToImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformationServer).ToImage(ctx, req.(*ToImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transformation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image_service.Transformation",
	HandlerType: (*TransformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToImage",
			Handler:    _Transformation_ToImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcd, 0xcc, 0x4d, 0x4c, 0x4f,
	0x8d, 0x87, 0x0a, 0x2a, 0xa9, 0x70, 0xf1, 0x85, 0xe4, 0x7b, 0x82, 0x84, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x52, 0x2b, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0xc0, 0x6c, 0x25, 0x67, 0x2e, 0x7e, 0xb8, 0xaa, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0x21, 0x11, 0x2e, 0x56, 0xb0, 0x49, 0x50, 0x75, 0x10, 0x8e, 0x10, 0x0f, 0x17, 0x63, 0x85, 0x04,
	0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x63, 0x05, 0x88, 0x57, 0x29, 0xc1, 0x0c, 0xe1, 0x55, 0x1a,
	0x45, 0x71, 0xf1, 0x85, 0x14, 0x25, 0xe6, 0x15, 0xa7, 0xe5, 0x17, 0xe5, 0x26, 0x96, 0x64, 0xe6,
	0xe7, 0x09, 0x79, 0x70, 0xb1, 0x43, 0x8d, 0x15, 0x92, 0xd5, 0x43, 0x71, 0x97, 0x1e, 0xaa, 0xa3,
	0xa4, 0xe4, 0x70, 0x49, 0x43, 0x5c, 0xe3, 0xc4, 0x12, 0xc5, 0x54, 0x90, 0x94, 0xc4, 0x06, 0xf6,
	0xa2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xce, 0x9a, 0xf5, 0xfa, 0xf3, 0x00, 0x00, 0x00,
}
